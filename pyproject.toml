[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "movie-scraper"
version = "1.0.0"
description = "Production-ready foreign films calendar scraper for Perm cinemas"
authors = [{name = "MaxYtre", email = "maxytree@example.com"}]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Office/Business :: Scheduling",
]
keywords = ["cinema", "calendar", "scraping", "ics", "perm", "films"]

# Core dependencies for production
dependencies = [
    "aiohttp>=3.9.0,<4.0",
    "beautifulsoup4>=4.12.0,<5.0",
    "fastapi>=0.104.0,<1.0",
    "uvicorn[standard]>=0.24.0,<1.0",
    "pydantic>=2.5.0,<3.0",
    "pydantic-settings>=2.1.0,<3.0",
    "aiosqlite>=0.19.0,<1.0",
    "icalendar>=5.0.0,<6.0",
    "python-dateutil>=2.8.0,<3.0",
    "pytz>=2023.3",
    "lxml>=4.9.0,<5.0",
    "tenacity>=8.2.0,<9.0",
    "structlog>=23.2.0,<24.0",
    "prometheus-client>=0.19.0,<1.0",
    "httpx>=0.25.0,<1.0",
]

# Optional dependencies for different deployment scenarios
[project.optional-dependencies]
# Development tools
dev = [
    "pytest>=7.4.0,<8.0",
    "pytest-asyncio>=0.21.0,<1.0",
    "pytest-cov>=4.1.0,<5.0",
    "pytest-mock>=3.11.0,<4.0",
    "pytest-httpx>=0.26.0,<1.0",
    "ruff>=0.1.6,<1.0",
    "mypy>=1.7.0,<2.0",
    "pre-commit>=3.5.0,<4.0",
    "faker>=20.1.0,<21.0",
    "respx>=0.20.0,<1.0",
    "aioresponses>=0.7.0,<1.0",
]

# Browser automation for JS-heavy pages
browser = [
    "playwright>=1.40.0,<2.0",
]

# PostgreSQL support for scaling
postgres = [
    "asyncpg>=0.29.0,<1.0",
    "alembic>=1.12.0,<2.0",
]

# Production monitoring
monitoring = [
    "sentry-sdk[fastapi]>=1.38.0,<2.0",
    "opentelemetry-api>=1.21.0,<2.0",
    "opentelemetry-sdk>=1.21.0,<2.0",
]

[project.urls]
Homepage = "https://github.com/MaxYtre/movie"
Repository = "https://github.com/MaxYtre/movie.git"
Issues = "https://github.com/MaxYtre/movie/issues"
Calendar = "https://maxytree.github.io/movie/calendar.ics"

[project.scripts]
movie-scraper = "movie_scraper.main:cli"

[tool.setuptools.packages.find]
where = ["."]
include = ["movie_scraper*"]

[tool.setuptools.package-data]
movie_scraper = ["py.typed", "sql/*.sql", "templates/*.html"]

# Ruff configuration for linting and formatting
[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "PTH",  # flake8-use-pathlib
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501",   # line too long - handled by formatter
    "B008",   # function calls in argument defaults
    "RUF012", # mutable class attributes
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = ["ARG", "S101"]  # Allow unused args and asserts in tests
"movie_scraper/migrations/**/*.py" = ["ARG"]  # Migration files often have unused args

[tool.ruff.isort]
known-first-party = ["movie_scraper"]
force-single-line = true

# MyPy configuration for type checking
[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
show_error_codes = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
extra_checks = true

# Third-party library stubs
[[tool.mypy.overrides]]
module = [
    "aioresponses.*",
    "respx.*",
    "icalendar.*",
    "bs4.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m "not slow"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "network: marks tests requiring network access",
]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["movie_scraper"]
omit = [
    "movie_scraper/migrations/*",
    "tests/*",
    "*/venv/*",
    "*/.venv/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Pre-commit configuration referenced in .pre-commit-config.yaml
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/astral-sh/ruff-pre-commit",
        rev = "v0.1.6",
        hooks = [
            {id = "ruff", args = ["--fix"]},
            {id = "ruff-format"},
        ],
    },
    {
        repo = "https://github.com/pre-commit/mirrors-mypy",
        rev = "v1.7.1",
        hooks = [{id = "mypy", additional_dependencies = ["types-all"]}],
    },
]